! S. Fartoukh March 2009
!Generation of errors for the new IT with the orientation LE-MQX-NLE-...-IP-...-NLE-MQX-LE 
! S. Fartoukh March 2012
! Update for compatibility with the macro_error.madx file of SLHCV3.1b
! R. De Maria Nov 2012
! Update new names and lead end on the cryostat convention  IP =Q1a||Q1b=   =Q2a||Q2b=   =Q3a||Q3b=
! F.F. Van der Veken Aug 2019
! Update Q2 has opposite connection (due to MCBXF):  IP  (=Q1a Q1b=)  (=MCBXFBa Q2a=)  (=Q2b MCBXFBb=)  (=Q3a Q3b=) 
! T. Pugnat Sep 2022
! Change routine such that orientation is given by tables instead of hardcoded

exec new_magnetfamily(MQXFA);

abs_or_rel:=0; order:=1;

!Q1a.R5
if (print_errors==1){print, text="Errors for MQXFA.A1R5.*";};
select,flag=error,clear;select,flag=error,pattern="^MQXFA\.A1R5.*[0-9]$";
exec Efcomp_Random_Multi(MQXFA, MQXFA.A1R5, abs_or_rel, order);

!Q1b.R5
if (print_errors==1){print, text="Errors for MQXFA.B1R5.*";};
select,flag=error,clear;select,flag=error,pattern="^MQXFA\.B1R5.*[0-9]$";
exec Efcomp_Random_Multi(MQXFA, MQXFA.B1R5, abs_or_rel, order);

!Q3a.R5
if (print_errors==1){print, text="Errors for MQXFA.A3R5.*";};
select,flag=error,clear;select,flag=error,pattern="^MQXFA\.A3R5.*[0-9]$";
exec Efcomp_Random_Multi(MQXFA, MQXFA.A3R5, abs_or_rel, order);

!Q3b.R5
if (print_errors==1){print, text="Errors for MQXFA.B3R5.*";};
select,flag=error,clear;select,flag=error,pattern="^MQXFA\.B3R5.*[0-9]$";
exec Efcomp_Random_Multi(MQXFA, MQXFA.B3R5, abs_or_rel, order);


!Q1a.L5
if (print_errors==1){print, text="Errors for MQXFA.A1L5.*";};
select,flag=error,clear;select,flag=error,pattern="^MQXFA\.A1L5.*[0-9]$";
exec Efcomp_Random_Multi(MQXFA, MQXFA.A1L5, abs_or_rel, order);

!Q1b.L5
if (print_errors==1){print, text="Errors for MQXFA.B1L5.*";};
select,flag=error,clear;select,flag=error,pattern="^MQXFA\.B1L5.*[0-9]$";
exec Efcomp_Random_Multi(MQXFA, MQXFA.B1L5, abs_or_rel, order);


!Q3a.L5
if (print_errors==1){print, text="Errors for MQXFA.A3L5.*";};
select,flag=error,clear;select,flag=error,pattern="^MQXFA\.A3L5.*[0-9]$";
exec Efcomp_Random_Multi(MQXFA, MQXFA.A3L5, abs_or_rel, order);

!Q3b.L5
if (print_errors==1){print, text="Errors for MQXFA.B3L5.*";};
select,flag=error,clear;select,flag=error,pattern="^MQXFA\.B3L5.*[0-9]$";
exec Efcomp_Random_Multi(MQXFA, MQXFA.B3L5, abs_or_rel, order);



!Q1a.R1
if (print_errors==1){print, text="Errors for MQXFA.A1R1.*";};
select,flag=error,clear;select,flag=error,pattern="^MQXFA\.A1R1.*[0-9]$";
exec Efcomp_Random_Multi(MQXFA, MQXFA.A1R1, abs_or_rel, order);

!Q1b.R1
if (print_errors==1){print, text="Errors for MQXFA.B1R1.*";};
select,flag=error,clear;select,flag=error,pattern="^MQXFA\.B1R1.*[0-9]$";
exec Efcomp_Random_Multi(MQXFA, MQXFA.B1R1);

!Q3a.R1
if (print_errors==1){print, text="Errors for MQXFA.A3R1.*";};
select,flag=error,clear;select,flag=error,pattern="^MQXFA\.A3R1.*[0-9]$";
exec Efcomp_Random_Multi(MQXFA, MQXFA.A3R1, abs_or_rel, order);

!Q3b.R1
if (print_errors==1){print, text="Errors for MQXFA.B3R1.*";};
select,flag=error,clear;select,flag=error,pattern="^MQXFA\.B3R1.*[0-9]$";
exec Efcomp_Random_Multi(MQXFA, MQXFA.B3R1, abs_or_rel, order);

!Q1a.L1
if (print_errors==1){print, text="Errors for MQXFA.A1L1.*";};
select,flag=error,clear;select,flag=error,pattern="^MQXFA\.A1L1.*[0-9]$";
exec Efcomp_Random_Multi(MQXFA, MQXFA.A1L1, abs_or_rel, order);

!Q1b.L1
if (print_errors==1){print, text="Errors for MQXFA.B1L1.*";};
select,flag=error,clear;select,flag=error,pattern="^MQXFA\.B1L1.*[0-9]$";
exec Efcomp_Random_Multi(MQXFA, MQXFA.B1L1, abs_or_rel, order);

!Q3a.L1
if (print_errors==1){print, text="Errors for MQXFA.A3L1.*";};
select,flag=error,clear;select,flag=error,pattern="^MQXFA\.A3L1.*[0-9]$";
exec Efcomp_Random_Multi(MQXFA, MQXFA.A3L1, abs_or_rel, order);

!Q3b.L1
if (print_errors==1){print, text="Errors for MQXFA.B3L1.*";};
select,flag=error,clear;select,flag=error,pattern="^MQXFA\.B3L1.*[0-9]$";
exec Efcomp_Random_Multi(MQXFA, MQXFA.B3L1, abs_or_rel, order);

return;
