! F.F. Van der Veken Aug 2019
! Update Q2 has opposite connection (due to MCBXF):  IP  (=Q1a Q1b=)  (=MCBXFBa Q2a=)  (=Q2b MCBXFBb=)  (=Q3a Q3b=) 
! T. Pugnat Sep 2022
! Change routine such that orientation is given by tables instead of hardcoded

generate_fringe(slot,ttt,llrr,ks,kref,isinv):macro={
    inout     := table(HLLHCROTATIONS, slot, inout);    // 0: single bore        1: outer     2: inner
    
    klref=kref*l.ttt*ks;
    exec,new_magnetfamily(ttt);
    exec,new_magnetindividual(ttt,inout);
    select,flag=error,clear;select,flag=error,pattern="^slot..llrr$";
    if (print_errors==1){
        print, text="Errors for fringe llrr of slot.*";
        value,klref,Rr_ttt,l.ttt;
    };
    exec,errorgenerate_abs(ttt,isinv,1,klref);
};

generate_fringe_lr(slot,ttt,ks,kref):macro={
    yrotangle := table(HLLHCROTATIONS, slot, yrota);    // rotation around vertical axis
    ! srotangle := table(HLLHCROTATIONS, slot, srota);    // rotation around beam axis
    if (yrotangle == 180) {yrotangle = 1;};
    
    if(yrotangle==0){
        exec,generate_fringe(slot,tttcs,FL,ks,kref,yrotangle);
        exec,generate_fringe(slot,tttnc,FR,ks,kref,yrotangle);
    };
    if(yrotangle==1){
        exec,generate_fringe(slot,tttnc,FL,ks,kref,yrotangle);
        exec,generate_fringe(slot,tttcs,FR,ks,kref,yrotangle);
    };
};



! IP  (=Q1a Q1b=)  (=MCBXFBa Q2a=)  (=Q2b MCBXFBb=)  (=Q3a Q3b=) 
!assumes:
! e.g. b8_MQXFnc_inj, b8_MQXFcs_inj
! e.g. l.MQXFnc, l.MQXFcs, Rr_MQXFcs, Rr_MQXFnc
ks= 1;exec,generate_fringe_lr(MQXFA.A1R1,MQXF,ks,kqx1.r1);
ks= 1;exec,generate_fringe_lr(MQXFA.B1R1,MQXF,ks,kqx1.r1);
ks=-1;exec,generate_fringe_lr(MQXFB.A2R1,MQXF,ks,kqx2a.r1);
ks=-1;exec,generate_fringe_lr(MQXFB.B2R1,MQXF,ks,kqx2b.r1);
ks= 1;exec,generate_fringe_lr(MQXFA.A3R1,MQXF,ks,kqx3.r1);
ks= 1;exec,generate_fringe_lr(MQXFA.B3R1,MQXF,ks,kqx3.r1);

ks= 1;exec,generate_fringe_lr(MQXFA.A1R5,MQXF,ks,kqx1.r5);
ks= 1;exec,generate_fringe_lr(MQXFA.B1R5,MQXF,ks,kqx1.r5);
ks=-1;exec,generate_fringe_lr(MQXFB.A2R5,MQXF,ks,kqx2a.r5);
ks=-1;exec,generate_fringe_lr(MQXFB.B2R5,MQXF,ks,kqx2b.r5);
ks= 1;exec,generate_fringe_lr(MQXFA.A3R5,MQXF,ks,kqx3.r5);
ks= 1;exec,generate_fringe_lr(MQXFA.B3R5,MQXF,ks,kqx3.r5);

ks= 1;exec,generate_fringe_lr(MQXFA.A1L1,MQXF,ks,kqx1.l1);
ks= 1;exec,generate_fringe_lr(MQXFA.B1L1,MQXF,ks,kqx1.l1);
ks=-1;exec,generate_fringe_lr(MQXFB.A2L1,MQXF,ks,kqx2a.l1);
ks=-1;exec,generate_fringe_lr(MQXFB.B2L1,MQXF,ks,kqx2b.l1);
ks= 1;exec,generate_fringe_lr(MQXFA.A3L1,MQXF,ks,kqx3.l1);
ks= 1;exec,generate_fringe_lr(MQXFA.B3L1,MQXF,ks,kqx3.l1);

ks= 1;exec,generate_fringe_lr(MQXFA.A1L5,MQXF,ks,kqx1.l5);
ks= 1;exec,generate_fringe_lr(MQXFA.B1L5,MQXF,ks,kqx1.l5);
ks=-1;exec,generate_fringe_lr(MQXFB.A2L5,MQXF,ks,kqx2a.l5);
ks=-1;exec,generate_fringe_lr(MQXFB.B2L5,MQXF,ks,kqx2b.l5);
ks= 1;exec,generate_fringe_lr(MQXFA.A3L5,MQXF,ks,kqx3.l5);
ks= 1;exec,generate_fringe_lr(MQXFA.B3L5,MQXF,ks,kqx3.l5);

return;
